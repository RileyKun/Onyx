name: Build Release

on: 
  workflow_dispatch:
  push:
    branches: main
    paths: UnityPackage/package.json

env:
  packageName: "com.pixy.onyx"
  packagePath: "Packages/com.pixy.onyx"
  packageFileName: "Onyx"
  packageReleaseName: "Release"

permissions:
  contents: write

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    
      - name: Checkout
        uses: actions/checkout@v3
    
      - name: Get Version
        id: version
        uses: zoexx/github-action-json-file-properties@b9f36ce6ee6fe2680cd3c32b2c62e22eade7e590
        with: 
            file_path: "UnityPackage/package.json"
            prop_path: "version"
      
      - name: Generate Tag
        id: tag
        run: echo prop="${{ steps.version.outputs.value }}" >> $GITHUB_OUTPUT

      - name: Check If Release Tag Exists
        id: checkReleaseTag
        uses: mukunku/tag-exists-action@v1.2.0
        with:
          tag: ${{ steps.tag.outputs.prop }}
    
      - name: Set Environment Variables
        if: ${{ steps.checkReleaseTag.outputs.exists == 'false' }}
        run: |
          echo "zipFile=${{ env.packageFileName }}_v${{ steps.version.outputs.value }}_VPM".zip >> $GITHUB_ENV
          echo "unityPackage=${{ env.packageFileName }}_v${{ steps.version.outputs.value }}.unitypackage" >> $GITHUB_ENV
    
      - name: Set ZIP Url
        uses: jossef/action-set-json-field@v2.1
        with:
          file: UnityPackage/package.json
          field: url
          value: 'https://github.com/${{ github.repository }}/releases/download/${{ steps.tag.outputs.prop }}/${{ env.zipFile }}'
          
      - name: Set UnityPackage Url
        uses: jossef/action-set-json-field@v2.1
        with:
          file: UnityPackage/package.json
          field: unityPackage
          value: 'https://github.com/${{ github.repository }}/releases/download/${{ steps.tag.outputs.prop }}/${{ env.unityPackage }}'
          
      - name: Create Meta List
        if: ${{ steps.checkReleaseTag.outputs.exists == 'false' }}
        run: |
          cd UnityPackage
          find . -type f -name "*.meta" > ../metaList
          
      - name: Create Zip with Proper Structure
        if: ${{ steps.checkReleaseTag.outputs.exists == 'false' }}
        run: |
          # Create zip directly from UnityPackage contents (no subfolder)
          cd UnityPackage
          zip -r ../${{env.zipFile}} . -x "*.git*" "*.github*" ".gitignore"
          cd ..
          
      - name: Create UnityPackage
        if: ${{ steps.checkReleaseTag.outputs.exists == 'false' }}
        uses: pCYSl5EDgo/create-unitypackage@cfcd3cf0391a5ef1306342794866a9897c32af0b
        with:
          package-path: ${{ env.unityPackage }}
          include-files: metaList
          project-folder: UnityPackage
          
      - name: Add Icon to UnityPackage
        if: ${{ steps.checkReleaseTag.outputs.exists == 'false' }}
        uses: foxscore/add-icon-to-unitypackage@v1
        with:
          package_path: ${{ env.unityPackage }}
          icon_path: '.github/thumbnail.png'
          package_not_found_behavior: 'warn'
          icon_not_found_behavior: 'warn'
          icon_already_present_behavior: 'warn'
          
      - name: Cleanup
        if: ${{ steps.checkReleaseTag.outputs.exists == 'false' }}
        run: |
          rm metaList
        
      - name: Make Release
        if: ${{ steps.checkReleaseTag.outputs.exists == 'false' }}
        uses: softprops/action-gh-release@de2c0eb89ae2a093876385947365aca7b0e5f844
        with:
          name: "${{ env.packageReleaseName }} v${{ steps.version.outputs.value }}"
          tag_name: "v${{ steps.version.outputs.value }}"
          files: |
            ${{ env.zipFile }}
            ${{ env.unityPackage }}
